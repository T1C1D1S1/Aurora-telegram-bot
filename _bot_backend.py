#!/usr/bin/python
import logging
import threading
from time import sleep
from typing import List

from telegram import Update
from telegram.ext import Updater, CommandHandler
from telegram.ext.utils.types import CCT

from modules.inspiration import get_inspiration_text, get_inspiration_image_url
from modules.red_alert import Alert
from modules.snake import snake

# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
# Enable logging
logger = logging.getLogger(__name__)


class AuroraBot(object):
    def __init__(self, token: str, load_inspirobot: bool=False, load_red_alert: bool = False, load_snake: bool=False,
                 red_alert_places_filter: List = None):
        """
        A class representing Aurora team's bot
        :param token: A telegram bot token (generated by BotFather)
        :param load_inspirobot: load inspirobot module
        :param load_red_alert: load red alert module
        :param load_snake: load snake module
        :param red_alert_places_filter: Optional, a whitelist of places to display alarms from (by default everywhere will be displayed)
        """
        self._load_inspirobot = load_inspirobot
        self._load_red_alert = load_red_alert
        self._load_snake = load_snake

        self._red_alert_places_filter = red_alert_places_filter or []
        self._is_red_alert_running = False
        self._updater = Updater(token, use_context=True)
        self._dispatcher = self._updater.dispatcher



    @staticmethod
    def _bot_ping(update: Update, context: CCT):
        """
        sends out a message to show the bot is running
        :param update:
        :param context:
        :return:
        """
        context.bot.send_message(chat_id=update.effective_message.chat_id, text='Bot is up and running')

    @staticmethod
    def _help_prompt(update: Update, context: CCT):
        context.bot.send_message(chat_id=update.effective_message.chat_id, text='Welcome to Aurora telegram bot!\nthe following commands are available:\n/help: print out help prompt\n/ping: check if bot is up and running\n/inspireimg: get an inspirational image\n/inspire: get an inspirational quote\n/startred: start red alert service\n/stopred: stop red alert service\n/snake: Get a Nachash Hashmal\n')

    @staticmethod
    def _send_snake(update: Update, context: CCT):
        context.bot.send_message(chat_id=update.effective_message.chat_id, text=snake())

    def _start_red_alert(self, update: Update, context: CCT):
        if self._is_red_alert_running:
            context.bot.send_message(chat_id=update.effective_message.chat_id, text='Red alerts are already running...')
            return
        context.bot.send_message(chat_id=update.effective_message.chat_id, text='Red alert updates have been started')
        self._is_red_alert_running = True
        self.red_alert_thread = threading.Thread(target=self._run_red_alert, args=(update, context))
        self.red_alert_thread.start()

    def _stop_red_alert(self, update: Update, context: CCT):
        if not self._is_red_alert_running:
            context.bot.send_message(chat_id=update.effective_message.chat_id, text='Red alerts are already stopped...')
            return
        self._is_red_alert_running = False
        context.bot.send_message(chat_id=update.effective_message.chat_id, text='Red alert updates have been stopped')

    def _run_red_alert(self, update: Update, context: CCT):
        alerts = Alert()
        while self._is_red_alert_running:
            new_alerts = alerts.check_for_update()
            if new_alerts:
                if self._red_alert_places_filter:
                    new_alerts = filter(lambda x: any(substr in x for substr in self._red_alert_places_filter),
                                        new_alerts)
                for new_alert in new_alerts:
                    context.bot.send_message(chat_id=update.effective_message.chat_id,
                                             text=alerts.notify(new_alert))
            sleep(4)

    @staticmethod
    def _send_inspiration_text(update: Update, context: CCT):
        quote = get_inspiration_text()
        context.bot.send_message(chat_id=update.effective_message.chat_id, text=quote)

    @staticmethod
    def _send_inspiration_image(update: Update, context: CCT):
        image_url = get_inspiration_image_url()
        context.bot.send_photo(chat_id=update.effective_message.chat_id, photo=image_url)

    def run(self):
        if self._load_red_alert:
            red_alert_start_handler = CommandHandler('startred', self._start_red_alert)
            red_alert_stop_handler = CommandHandler('stopred', self._stop_red_alert)
            self._dispatcher.add_handler(red_alert_start_handler)
            self._dispatcher.add_handler(red_alert_stop_handler)
        if self._load_inspirobot:
            inspire_image_handler = CommandHandler('inspireimg', self._send_inspiration_image)
            inspire_text_handler = CommandHandler('inspire', self._send_inspiration_text)
            self._dispatcher.add_handler(inspire_image_handler)
            self._dispatcher.add_handler(inspire_text_handler)
        if self._load_snake:
            snake_handler = CommandHandler('snake', self._send_snake)
            self._dispatcher.add_handler(snake_handler)

        help_handler = CommandHandler('help', self._help_prompt)
        ping_handler = CommandHandler('ping', self._bot_ping)
        self._dispatcher.add_handler(ping_handler)
        self._dispatcher.add_handler(help_handler)
        self._updater.start_polling()

